!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<e.length;i++){var s=e[i];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(0)(!1)).i(n(3),""),t.push([e.i,'body{font-family:"Righteous", cursive}main{background-image:linear-gradient(to right, #4baea0, #278d7f);height:100vh}main h1{height:140px;display:flex;justify-content:center;align-items:center;font-size:80px;color:antiquewhite}.in-wrapper{animation:hell 2s ease-in 0s}@keyframes hell{0%{opacity:0}50%{opacity:0.5}80%{opacity:0.75}100%{opacity:1}}.main-board{display:flex;justify-content:space-around;align-items:center;position:relative}.board .row{display:flex}.board .col{display:flex;justify-content:center;align-items:center;border:1px solid black;margin:0.5px;height:30px;width:30px;padding:10px;border-radius:4px;background-color:#fda77f;transition:0.8s}.board .col:hover{transform:scale(1.05);cursor:pointer;background-color:#fa7f46}.board__player .col{background-color:#f0decb}.board__player .col:hover{background-color:#f0decb;transform:scale(1);cursor:auto}.taken{background-color:#1a2c3a !important}.hit{background-color:#f0134d !important;animation:hit 1s ease-in-out 0s}@keyframes hit{50%{transform:scale(3);opacity:0.5}100%{transfor:scale(1);opacity:1}}.hit:hover{transform:none;cursor:auto;background-color:#ff6361}.miss{background-color:#3e64ff !important;animation:hit 1s ease-in-out 0s}@keyframes hit{0%{background-color:transparent}50%{transform:scale(3);background-color:transparent;opacity:0.5}80%{background-color:transparent}100%{transfor:scale(1);opacity:1}}.miss:hover{transform:none;cursor:auto;background-color:#d1afae}.status{display:flex;justify-content:space-around;align-items:center;height:20vh}.status .pl-status,.status .cp-status{border:6px solid #f2eee5;background-image:linear-gradient(to right, #979797, #c5bfbf);border-radius:50px;width:13rem;height:80px;display:flex;flex-direction:column;align-items:center;justify-content:space-around;color:#f2eee5;font-size:25px}.playerWin,.computerWin{animation:hello 2s ease-out 0s;margin-top:140px;height:40vh;background-image:linear-gradient(to right, #3413f0, #634ce7);display:flex;flex-direction:column;justify-content:center;align-items:center}@keyframes hello{0%{opacity:0}50%{opacity:0.5}80%{opacity:0.75}100%{opacity:1}}.playerWin h1,.computerWin h1{color:antiquewhite;font-size:65px}.playerWin button,.computerWin button{padding:30px;border-radius:10px;background-image:linear-gradient(to left, #4baea0, #278d7f);color:antiquewhite;font-size:25px;font-family:"Righteous", cursive;margin-top:40px}.computerWin{background-image:linear-gradient(to right, #f0134d, #90072b)}.active{background-image:linear-gradient(to right, #70416d, #995995) !important}.invalid{position:absolute;width:15%;top:-25%;left:41%;padding:20px;font-size:25px;border-radius:20px;border:5px solid antiquewhite;background-image:linear-gradient(to right, #f0134d, #90072b);display:flex;justify-content:center;align-items:center;color:antiquewhite}.hide{transform:scale(0)}\n',""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""])},function(e,t,n){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],t))}else{for(var s=[];i<r.parts.length;i++)s.push(b(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function l(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o&&e.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function b(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=l(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=l(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=s(e,t);return c(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a],l=o[i.id];l&&(l.refs--,r.push(l))}e&&c(s(e,t),t);for(var u=0;u<r.length;u++){var d=r[u];if(0===d.refs){for(var p=0;p<d.parts.length;p++)d.parts[p]();delete o[d.id]}}}}},function(e,t,n){"use strict";n.r(t);n(1);var r=(()=>{const e=document.querySelector(".pl-status"),t=document.querySelector(".cp-status"),n=document.querySelector(".board__computer"),r=document.querySelector(".board__player"),o=document.querySelector("#pl-hits"),a=document.querySelector("#cp-hits"),i=document.querySelector(".invalid"),s=document.querySelector(".in-wrapper");return{buildCompBoard:e=>{const t=e.board.map((e,t)=>{return`\n        <div class="row" > ${e.map((e,n)=>{let r,o="";switch(e.state){case"hit":r="x",o="hit";break;case"miss":r="||",o="miss";break;default:r=[t,n].join("")}return`\n        <div class="col bot ${o}" id="${[t,n].join("")}">${r}</div>\n        `}).join("")}</div>\n        `}).join("");n.innerHTML=t},buildPlayerBoard:e=>{const t=e.board.map((e,t)=>{return`\n        <div class= "row" > ${e.map((e,n)=>{let r;switch(e.state){case"taken":r="";break;default:r=[t,n].join("")}return`\n        <div class= "col ${e.state} " id = "P${[t,n].join("")}" > ${r}</div>\n        `}).join("")}</div>\n        `}).join("");r.innerHTML=t},comBoard:n,changeCell:(e,t)=>{let n="";switch(t.state){case"hit":n="hit";break;case"miss":n="miss"}e.classList.add(n),e.innerText=""},updateBanner:(n,r)=>{n?(o.innerText=`${r} sunked ships`,e.classList.remove("active"),t.classList.add("active")):(a.innerText=`${r} sunked ships`,e.classList.add("active"),t.classList.remove("active"))},wrapper:s,playerWin:'\n    <div class="playerWin">\n      <h1> Congratulations!! You are the Winner! </h1>\n      <button class="gameStart"> Play Again </button>\n    </div> \n  ',computerWin:'\n  <div class="computerWin">\n    <h1> Oh no!! The Computer Wins! </h1>\n    <button class="gameStart"> Play Again </button>\n  </div> \n',worngMoveInd:i}})();var o=e=>{const t=["0123456789","0123456789"],n=new Array(10);t[0].split("").forEach((e,r)=>{n[r]=[],t[1].split("").forEach(t=>{n[r].push({pos:`${e}${t}`,state:"empty"})})});const r=n,o=[],a=(e,t,n)=>{const o=parseInt(t.pos[1]),a=parseInt(t.pos[0]);if("horizontal"===n){for(let t=o;t<=o+e.length-1;t++)if(!r[a][t]||"empty"!==r[a][t].state)return!1}else for(let t=a;t<=a+e.length-1;t++)if(!r[t]||"empty"!==r[t][o].state)return!1;return!0};return{validPosition:a,board:r,placeShip:()=>{e.map(e=>{let t,[n,o]=[0,0];const i=["horizontal","vertical"];let s;do{n=Math.round(9*Math.random()),o=Math.round(9*Math.random()),t=r[o][n],s=Math.round(1*Math.random())}while(!a(e,t,i[s]));if("horizontal"===i[s])for(let t=n;t<n+e.length;t++)r[o][t].state="taken",e.position.push(r[o][t].pos);else if("vertical"===i[s])for(let t=o;t<o+e.length;t++)r[t][n].state="taken",e.position.push(r[t][n].pos);return e})},recieveAttack:(t,n)=>{const a=r[t][n].pos,i=e.filter(e=>e.position.includes(a))[0];i?(i.hit(a),r[t][n].state="hit",i.isSunk()&&o.push(i.type())):r[t][n].state="miss"},gameOver:()=>o.length>=e.length,sunkedShips:()=>o.length}};var a=e=>({length:e,type:()=>{switch(e){case 1:return"Submarine";case 2:return"Destroyer";case 3:return"Cruiser";case 4:return"Battelship";default:return!1}},position:[],healthPoints:e,hit(e){this.position.includes(e)&&(this.healthPoints-=this.isSunk()?0:1)},isSunk(){return 0===this.healthPoints}});var i=(e,t)=>{const n=t,r=e,o=[];return{getName:()=>r,getType:()=>n,getMoves:()=>o,play:e=>{if("bot"===n){let e,t;do{e=Math.round(9*Math.random()),t=Math.round(9*Math.random())}while(o.includes([t,e].join("")));return o.push([t,e].join("")),[t,e]}const[t,r]=e.pos.split("").map(e=>parseInt(e));return!o.includes([t,r].join(""))&&(o.push([t,r].join("")),[t,r])}}};let s=null,c=null;const l=i("Computer","bot"),u=i("Clarence","Human"),d=[a(5),a(4),a(3),a(2),a(1)],p=[a(5),a(4),a(3),a(2),a(1)];let f,h,m;const b=()=>{window.location.reload(!1)};(s=o(p)).placeShip(),r.buildCompBoard(s),(c=o(d)).placeShip(),r.buildPlayerBoard(c),f=!0,h=0,m=0,r.updateBanner(!0,0),r.updateBanner(!1,0);const g=()=>{if(!f){const e=l.play(),[t,n]=e;e.unshift("P");const o=document.getElementById(e.join(""));c.recieveAttack(t,n),m=c.sunkedShips(),r.updateBanner(f,m),r.changeCell(o,c.board[t][n]),setTimeout(()=>{f=!f},1e3),c.gameOver()&&(r.wrapper.innerHTML=r.computerWin,document.querySelector(".gameStart").addEventListener("click",b))}};window.onclick=e=>{let t=0,n=1;if(f){if(!e.target.classList.value.includes("bot"))return;if(t=parseInt(e.target.id.split("")[0]),n=parseInt(e.target.id.split("")[1]),u.play(s.board[t][n])){if(s.recieveAttack(t,n),r.changeCell(e.target,s.board[t][n]),h=s.sunkedShips(),r.updateBanner(f,h),r.worngMoveInd.classList.value="invalid hide",f=!f,s.gameOver())return r.wrapper.innerHTML=r.playerWin,void document.querySelector(".gameStart").addEventListener("click",b);setTimeout(g,1500)}else r.worngMoveInd.classList.remove("hide")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2Nzcy9tYWluLnNjc3M/MjhlNCIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2Nzcy9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9jc3MvcmVzZXQuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRE9NY29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZUJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGlwcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGxheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjb25jYXQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJfaSIsInB1c2giLCJvcHRpb25zIiwibG9jYWxzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwibGlzdFRvU3R5bGVzIiwic3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInBhcnRzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImoiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwib2JqIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiLCJwbGF5ZXJTdGF0dXMiLCJjb21wU3RhdHVzIiwiY29tQm9hcmQiLCJwbGF5ZXJCb2FyZCIsInBsYXllckhpdHMiLCJjb21wSGl0cyIsIndvcm5nTW92ZUluZCIsIndyYXBwZXIiLCJidWlsZENvbXBCb2FyZCIsImdhbWUiLCJodG1sIiwiYm9hcmQiLCJsaW5lIiwiY2VsbCIsIm1hcmsiLCJzdGF0ZSIsImlubmVySFRNTCIsImJ1aWxkUGxheWVyQm9hcmQiLCJpbmQiLCJqaW5kIiwiY2hhbmdlQ2VsbCIsImRpdiIsImNsYXNzTGlzdCIsImFkZCIsImlubmVyVGV4dCIsInVwZGF0ZUJhbm5lciIsInR1cm4iLCJoaXRzIiwicGxheWVyV2luIiwiY29tcHV0ZXJXaW4iLCJzaGlwcyIsImdyaWRUIiwiZ3JpZCIsIkFycmF5Iiwic3BsaXQiLCJzdUl0ZW0iLCJwb3MiLCJzdW5rZW4iLCJ2YWxpZFBvc2l0aW9uIiwic2hpcCIsImNvb3JkIiwiZmFjaW5nIiwiY29yZEgiLCJwYXJzZUludCIsImNvcmRWIiwicGxhY2VTaGlwIiwicmFuZG9tSCIsInJhbmRvbVYiLCJkaXIiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJwb3NpdGlvbiIsInJlY2lldmVBdHRhY2siLCJjb29yZDEiLCJjb29yZDIiLCJpbmNsdWRlcyIsImhpdCIsImlzU3VuayIsInR5cGUiLCJnYW1lT3ZlciIsInN1bmtlZFNoaXBzIiwiaGVhbHRoUG9pbnRzIiwibmFtIiwidHlwIiwibW92ZXMiLCJnZXROYW1lIiwiZ2V0VHlwZSIsImdldE1vdmVzIiwicGxheSIsImNvcmQxIiwiY29yZDIiLCJjb21wR2FtZSIsInBsYXllckdhbWUiLCJjb21wUGxheWVyIiwic2hpcFBsYXllciIsInNoaXBDb21wIiwicGxIaXRzIiwiY3BIaXRzIiwicmVmcmVzaCIsImxvY2F0aW9uIiwicmVsb2FkIiwiY29tcE1vdmUiLCJhcnIiLCJjcmQxIiwiY3JkMiIsInVuc2hpZnQiLCJnZXRFbGVtZW50QnlJZCIsInNldFRpbWVvdXQiLCJhZGRFdmVudExpc3RlbmVyIiwib25jbGljayJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxF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SWhLLEtBQUssS0FDN0NzSixFQUFXcEIsY0FBYytCLEVBQU1DLEdBQy9CUCxFQUFTTCxFQUFXWixjQUNwQixFQUFjcEMsYUFBYUMsRUFBTW9ELEdBRWpDLEVBQWMxRCxXQUFXQyxFQUFLb0QsRUFBVzlELE1BQU15RSxHQUFNQyxJQUNyREcsV0FBVyxLQUNUOUQsR0FBUUEsR0FDUCxLQUNDK0MsRUFBV2IsYUFDYixFQUFjckQsUUFBUVMsVUFBWSxFQUFjYSxZQUNoRDNGLFNBQVNNLGNBQWMsY0FBY2lKLGlCQUFpQixRQUFTVixNQUtyRTlJLE9BQU95SixRQUFXOUksSUFDaEIsSUFBSTBILEVBQVEsRUFDUkMsRUFBUSxFQUNaLEdBQUk3QyxFQUFNLENBQ1IsSUFBSTlFLEVBQUVOLE9BQU9nRixVQUFVeEksTUFBTTBLLFNBQVMsT0FJcEMsT0FFRixHQUxFYyxFQUFRM0IsU0FBUy9GLEVBQUVOLE9BQU9kLEdBQUcwRyxNQUFNLElBQUksSUFDdkNxQyxFQUFRNUIsU0FBUy9GLEVBQUVOLE9BQU9kLEdBQUcwRyxNQUFNLElBQUksSUFJckMsRUFBT21DLEtBQUtHLEVBQVM3RCxNQUFNMkQsR0FBT0MsSUFBUyxDQU83QyxHQU5BQyxFQUFTbkIsY0FBY2lCLEVBQU9DLEdBQzlCLEVBQWNuRCxXQUFXeEUsRUFBRU4sT0FBUWtJLEVBQVM3RCxNQUFNMkQsR0FBT0MsSUFDekRNLEVBQVNMLEVBQVNYLGNBQ2xCLEVBQWNwQyxhQUFhQyxFQUFNbUQsR0FDakMsRUFBY3ZFLGFBQWFnQixVQUFVeEksTUFBUSxlQUM3QzRJLEdBQVFBLEVBQ0o4QyxFQUFTWixXQUdYLE9BRkEsRUFBY3JELFFBQVFTLFVBQVksRUFBY1ksZUFDaEQxRixTQUFTTSxjQUFjLGNBQWNpSixpQkFBaUIsUUFBU1YsR0FHakVTLFdBQVdOLEVBQVUsV0FFckIsRUFBYzVFLGFBQWFnQixVQUFVM0MsT0FBTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBJbXBvcnRzXG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIiksIFwiXCIpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e2ZvbnQtZmFtaWx5OlxcXCJSaWdodGVvdXNcXFwiLCBjdXJzaXZlfW1haW57YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM0YmFlYTAsICMyNzhkN2YpO2hlaWdodDoxMDB2aH1tYWluIGgxe2hlaWdodDoxNDBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjgwcHg7Y29sb3I6YW50aXF1ZXdoaXRlfS5pbi13cmFwcGVye2FuaW1hdGlvbjpoZWxsIDJzIGVhc2UtaW4gMHN9QGtleWZyYW1lcyBoZWxsezAle29wYWNpdHk6MH01MCV7b3BhY2l0eTowLjV9ODAle29wYWNpdHk6MC43NX0xMDAle29wYWNpdHk6MX19Lm1haW4tYm9hcmR7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlfS5ib2FyZCAucm93e2Rpc3BsYXk6ZmxleH0uYm9hcmQgLmNvbHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCBibGFjazttYXJnaW46MC41cHg7aGVpZ2h0OjMwcHg7d2lkdGg6MzBweDtwYWRkaW5nOjEwcHg7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZC1jb2xvcjojZmRhNzdmO3RyYW5zaXRpb246MC44c30uYm9hcmQgLmNvbDpob3Zlcnt0cmFuc2Zvcm06c2NhbGUoMS4wNSk7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZmE3ZjQ2fS5ib2FyZF9fcGxheWVyIC5jb2x7YmFja2dyb3VuZC1jb2xvcjojZjBkZWNifS5ib2FyZF9fcGxheWVyIC5jb2w6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZjBkZWNiO3RyYW5zZm9ybTpzY2FsZSgxKTtjdXJzb3I6YXV0b30udGFrZW57YmFja2dyb3VuZC1jb2xvcjojMWEyYzNhICFpbXBvcnRhbnR9LmhpdHtiYWNrZ3JvdW5kLWNvbG9yOiNmMDEzNGQgIWltcG9ydGFudDthbmltYXRpb246aGl0IDFzIGVhc2UtaW4tb3V0IDBzfUBrZXlmcmFtZXMgaGl0ezUwJXt0cmFuc2Zvcm06c2NhbGUoMyk7b3BhY2l0eTowLjV9MTAwJXt0cmFuc2ZvcjpzY2FsZSgxKTtvcGFjaXR5OjF9fS5oaXQ6aG92ZXJ7dHJhbnNmb3JtOm5vbmU7Y3Vyc29yOmF1dG87YmFja2dyb3VuZC1jb2xvcjojZmY2MzYxfS5taXNze2JhY2tncm91bmQtY29sb3I6IzNlNjRmZiAhaW1wb3J0YW50O2FuaW1hdGlvbjpoaXQgMXMgZWFzZS1pbi1vdXQgMHN9QGtleWZyYW1lcyBoaXR7MCV7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH01MCV7dHJhbnNmb3JtOnNjYWxlKDMpO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7b3BhY2l0eTowLjV9ODAle2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9MTAwJXt0cmFuc2ZvcjpzY2FsZSgxKTtvcGFjaXR5OjF9fS5taXNzOmhvdmVye3RyYW5zZm9ybTpub25lO2N1cnNvcjphdXRvO2JhY2tncm91bmQtY29sb3I6I2QxYWZhZX0uc3RhdHVze2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MjB2aH0uc3RhdHVzIC5wbC1zdGF0dXMsLnN0YXR1cyAuY3Atc3RhdHVze2JvcmRlcjo2cHggc29saWQgI2YyZWVlNTtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzk3OTc5NywgI2M1YmZiZik7Ym9yZGVyLXJhZGl1czo1MHB4O3dpZHRoOjEzcmVtO2hlaWdodDo4MHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7Y29sb3I6I2YyZWVlNTtmb250LXNpemU6MjVweH0ucGxheWVyV2luLC5jb21wdXRlcldpbnthbmltYXRpb246aGVsbG8gMnMgZWFzZS1vdXQgMHM7bWFyZ2luLXRvcDoxNDBweDtoZWlnaHQ6NDB2aDtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzM0MTNmMCwgIzYzNGNlNyk7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn1Aa2V5ZnJhbWVzIGhlbGxvezAle29wYWNpdHk6MH01MCV7b3BhY2l0eTowLjV9ODAle29wYWNpdHk6MC43NX0xMDAle29wYWNpdHk6MX19LnBsYXllcldpbiBoMSwuY29tcHV0ZXJXaW4gaDF7Y29sb3I6YW50aXF1ZXdoaXRlO2ZvbnQtc2l6ZTo2NXB4fS5wbGF5ZXJXaW4gYnV0dG9uLC5jb21wdXRlcldpbiBidXR0b257cGFkZGluZzozMHB4O2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjNGJhZWEwLCAjMjc4ZDdmKTtjb2xvcjphbnRpcXVld2hpdGU7Zm9udC1zaXplOjI1cHg7Zm9udC1mYW1pbHk6XFxcIlJpZ2h0ZW91c1xcXCIsIGN1cnNpdmU7bWFyZ2luLXRvcDo0MHB4fS5jb21wdXRlcldpbntiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2YwMTM0ZCwgIzkwMDcyYil9LmFjdGl2ZXtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzcwNDE2ZCwgIzk5NTk5NSkgIWltcG9ydGFudH0uaW52YWxpZHtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxNSU7dG9wOi0yNSU7bGVmdDo0MSU7cGFkZGluZzoyMHB4O2ZvbnQtc2l6ZToyNXB4O2JvcmRlci1yYWRpdXM6MjBweDtib3JkZXI6NXB4IHNvbGlkIGFudGlxdWV3aGl0ZTtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2YwMTM0ZCwgIzkwMDcyYik7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2NvbG9yOmFudGlxdWV3aGl0ZX0uaGlkZXt0cmFuc2Zvcm06c2NhbGUoMCl9XFxuXCIsIFwiXCJdKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXG4qL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsIHEge1xcblxcdHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6ICcnO1xcblxcdGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cIiwgXCJcIl0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IFtdO1xuICB2YXIgbmV3U3R5bGVzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjc3MgPSBpdGVtWzFdO1xuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl07XG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfTtcblxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBwYXJ0czogW3BhcnRdXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuICAgIHZhciBqID0gMDtcblxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrO1xuXG4gICAgICBmb3IgKDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge1xuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgcmVmczogMSxcbiAgICAgICAgcGFydHM6IHBhcnRzXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cbiAgICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgICBkb21TdHlsZS5yZWZzLS07XG4gICAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgdmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcbiAgICAgIGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1heVJlbW92ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfZG9tU3R5bGUgPSBtYXlSZW1vdmVbX2ldO1xuXG4gICAgICBpZiAoX2RvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBfZG9tU3R5bGUucGFydHNbal0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtfZG9tU3R5bGUuaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07IiwiY29uc3QgY29tcHV0ZXJCb2FyZCA9ICgoKSA9PiB7XG4gIGNvbnN0IHBsYXllclN0YXR1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbC1zdGF0dXMnKTtcbiAgY29uc3QgY29tcFN0YXR1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jcC1zdGF0dXMnKTtcbiAgY29uc3QgY29tQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm9hcmRfX2NvbXB1dGVyJyk7XG4gIGNvbnN0IHBsYXllckJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkX19wbGF5ZXInKTtcbiAgY29uc3QgcGxheWVySGl0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbC1oaXRzJyk7XG4gIGNvbnN0IGNvbXBIaXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NwLWhpdHMnKTtcbiAgY29uc3Qgd29ybmdNb3ZlSW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludmFsaWQnKTtcbiAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbi13cmFwcGVyJyk7XG4gIGNvbnN0IHBsYXllcldpbiA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicGxheWVyV2luXCI+XG4gICAgICA8aDE+IENvbmdyYXR1bGF0aW9ucyEhIFlvdSBhcmUgdGhlIFdpbm5lciEgPC9oMT5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJnYW1lU3RhcnRcIj4gUGxheSBBZ2FpbiA8L2J1dHRvbj5cbiAgICA8L2Rpdj4gXG4gIGA7XG4gIGNvbnN0IGNvbXB1dGVyV2luID0gYFxuICA8ZGl2IGNsYXNzPVwiY29tcHV0ZXJXaW5cIj5cbiAgICA8aDE+IE9oIG5vISEgVGhlIENvbXB1dGVyIFdpbnMhIDwvaDE+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImdhbWVTdGFydFwiPiBQbGF5IEFnYWluIDwvYnV0dG9uPlxuICA8L2Rpdj4gXG5gO1xuICBjb25zdCBidWlsZENvbXBCb2FyZCA9IChnYW1lKSA9PiB7XG4gICAgY29uc3QgaHRtbCA9IGdhbWUuYm9hcmRcbiAgICAgIC5tYXAoKGxpbmUsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgcm93ID0gbGluZVxuICAgICAgICAgIC5tYXAoKGNlbGwsIGopID0+IHtcbiAgICAgICAgICAgIGxldCBtYXJrO1xuICAgICAgICAgICAgbGV0IHN0YXRlID0gJyc7XG4gICAgICAgICAgICBzd2l0Y2ggKGNlbGwuc3RhdGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnaGl0JzpcbiAgICAgICAgICAgICAgICBtYXJrID0gJ3gnO1xuICAgICAgICAgICAgICAgIHN0YXRlID0gJ2hpdCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ21pc3MnOlxuICAgICAgICAgICAgICAgIG1hcmsgPSAnfHwnO1xuICAgICAgICAgICAgICAgIHN0YXRlID0gJ21pc3MnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG1hcmsgPSBbaSwgal0uam9pbignJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sIGJvdCAke3N0YXRlfVwiIGlkPVwiJHtbaSwgal0uam9pbignJyl9XCI+JHttYXJrfTwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgPiAke3Jvd308L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIH0pXG4gICAgICAuam9pbignJyk7XG4gICAgY29tQm9hcmQuaW5uZXJIVE1MID0gaHRtbDtcbiAgfTtcblxuICBjb25zdCBidWlsZFBsYXllckJvYXJkID0gKGdhbWUpID0+IHtcbiAgICBjb25zdCBodG1sID0gZ2FtZS5ib2FyZFxuICAgICAgLm1hcCgobGluZSwgaW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvdyA9IGxpbmVcbiAgICAgICAgICAubWFwKChjZWxsLCBqaW5kKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhdGU7XG4gICAgICAgICAgICBzd2l0Y2ggKGNlbGwuc3RhdGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAndGFrZW4nOlxuICAgICAgICAgICAgICAgIHN0YXRlID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBbaW5kLCBqaW5kXS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgIDxkaXYgY2xhc3M9IFwiY29sICR7Y2VsbC5zdGF0ZX0gXCIgaWQgPSBcIlAke1tpbmQsIGppbmRdLmpvaW4oXG4gICAgJycsXG4gICl9XCIgPiAke3N0YXRlfTwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8ZGl2IGNsYXNzPSBcInJvd1wiID4gJHtyb3d9PC9kaXY+XG4gICAgICAgIGA7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJycpO1xuICAgIHBsYXllckJvYXJkLmlubmVySFRNTCA9IGh0bWw7XG4gIH07XG5cbiAgY29uc3QgY2hhbmdlQ2VsbCA9IChkaXYsIGNlbGwpID0+IHtcbiAgICBsZXQgc3RhdGUgPSAnJztcbiAgICBzd2l0Y2ggKGNlbGwuc3RhdGUpIHtcbiAgICAgIGNhc2UgJ2hpdCc6XG4gICAgICAgIHN0YXRlID0gJ2hpdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWlzcyc6XG4gICAgICAgIHN0YXRlID0gJ21pc3MnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkaXYuY2xhc3NMaXN0LmFkZChzdGF0ZSk7XG4gICAgZGl2LmlubmVyVGV4dCA9ICcnO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUJhbm5lciA9ICh0dXJuLCBoaXRzKSA9PiB7XG4gICAgaWYgKHR1cm4pIHtcbiAgICAgIHBsYXllckhpdHMuaW5uZXJUZXh0ID0gYCR7aGl0c30gc3Vua2VkIHNoaXBzYDtcbiAgICAgIHBsYXllclN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIGNvbXBTdGF0dXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBIaXRzLmlubmVyVGV4dCA9IGAke2hpdHN9IHN1bmtlZCBzaGlwc2A7XG4gICAgICBwbGF5ZXJTdGF0dXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICBjb21wU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJ1aWxkQ29tcEJvYXJkLFxuICAgIGJ1aWxkUGxheWVyQm9hcmQsXG4gICAgY29tQm9hcmQsXG4gICAgY2hhbmdlQ2VsbCxcbiAgICB1cGRhdGVCYW5uZXIsXG4gICAgd3JhcHBlcixcbiAgICBwbGF5ZXJXaW4sXG4gICAgY29tcHV0ZXJXaW4sXG4gICAgd29ybmdNb3ZlSW5kLFxuICB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IGNvbXB1dGVyQm9hcmQ7XG4iLCJjb25zdCBHYW1lQm9hcmQgPSAoc2hpcHMpID0+IHtcbiAgY29uc3QgZ3JpZFQgPSBbJzAxMjM0NTY3ODknLCAnMDEyMzQ1Njc4OSddO1xuICBjb25zdCBncmlkID0gbmV3IEFycmF5KDEwKTtcbiAgZ3JpZFRbMF0uc3BsaXQoJycpLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcbiAgICBncmlkW2ldID0gW107XG4gICAgZ3JpZFRbMV0uc3BsaXQoJycpLmZvckVhY2goKHN1SXRlbSkgPT4ge1xuICAgICAgZ3JpZFtpXS5wdXNoKHtcbiAgICAgICAgcG9zOiBgJHtpdGVtfSR7c3VJdGVtfWAsXG4gICAgICAgIHN0YXRlOiAnZW1wdHknLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGJvYXJkID0gZ3JpZDtcbiAgY29uc3Qgc3Vua2VuID0gW107XG4gIGNvbnN0IHZhbGlkUG9zaXRpb24gPSAoc2hpcCwgY29vcmQsIGZhY2luZykgPT4ge1xuICAgIGNvbnN0IGNvcmRIID0gcGFyc2VJbnQoY29vcmQucG9zWzFdKTtcbiAgICBjb25zdCBjb3JkViA9IHBhcnNlSW50KGNvb3JkLnBvc1swXSk7XG4gICAgaWYgKGZhY2luZyA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICBmb3IgKGxldCBqID0gY29yZEg7IGogPD0gY29yZEggKyBzaGlwLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICBpZiAoIWJvYXJkW2NvcmRWXVtqXSB8fCBib2FyZFtjb3JkVl1bal0uc3RhdGUgIT09ICdlbXB0eScpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IGNvcmRWOyBpIDw9IGNvcmRWICsgc2hpcC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKCFib2FyZFtpXSB8fCBib2FyZFtpXVtjb3JkSF0uc3RhdGUgIT09ICdlbXB0eScpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB2YWxpZFBvc2l0aW9uLFxuICAgIGJvYXJkLFxuICAgIHBsYWNlU2hpcDogKCkgPT4ge1xuICAgICAgc2hpcHMubWFwKChzaGlwKSA9PiB7XG4gICAgICAgIGxldCBbcmFuZG9tSCwgcmFuZG9tVl0gPSBbMCwgMF07XG4gICAgICAgIGxldCBjb29yZDtcbiAgICAgICAgY29uc3QgZmFjaW5nID0gWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ107XG4gICAgICAgIGxldCBkaXI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICByYW5kb21IID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogOSk7XG4gICAgICAgICAgcmFuZG9tViA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDkpO1xuICAgICAgICAgIGNvb3JkID0gYm9hcmRbcmFuZG9tVl1bcmFuZG9tSF07XG4gICAgICAgICAgZGlyID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMSk7XG4gICAgICAgIH0gd2hpbGUgKCF2YWxpZFBvc2l0aW9uKHNoaXAsIGNvb3JkLCBmYWNpbmdbZGlyXSkpO1xuICAgICAgICBpZiAoZmFjaW5nW2Rpcl0gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSByYW5kb21IOyBpIDwgcmFuZG9tSCArIHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvYXJkW3JhbmRvbVZdW2ldLnN0YXRlID0gJ3Rha2VuJztcbiAgICAgICAgICAgIHNoaXAucG9zaXRpb24ucHVzaChib2FyZFtyYW5kb21WXVtpXS5wb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmYWNpbmdbZGlyXSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSByYW5kb21WOyBpIDwgcmFuZG9tViArIHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvYXJkW2ldW3JhbmRvbUhdLnN0YXRlID0gJ3Rha2VuJztcbiAgICAgICAgICAgIHNoaXAucG9zaXRpb24ucHVzaChib2FyZFtpXVtyYW5kb21IXS5wb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2hpcDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVjaWV2ZUF0dGFjazogKGNvb3JkMSwgY29vcmQyKSA9PiB7XG4gICAgICBjb25zdCBib21iID0gYm9hcmRbY29vcmQxXVtjb29yZDJdO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBib21iLnBvcztcbiAgICAgIGNvbnN0IHNoaXAgPSBzaGlwcy5maWx0ZXIoKGUpID0+IGUucG9zaXRpb24uaW5jbHVkZXMocG9zaXRpb24pKVswXTtcbiAgICAgIGlmIChzaGlwKSB7XG4gICAgICAgIHNoaXAuaGl0KHBvc2l0aW9uKTtcbiAgICAgICAgYm9hcmRbY29vcmQxXVtjb29yZDJdLnN0YXRlID0gJ2hpdCc7XG4gICAgICAgIGlmIChzaGlwLmlzU3VuaygpKSB7XG4gICAgICAgICAgc3Vua2VuLnB1c2goc2hpcC50eXBlKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib2FyZFtjb29yZDFdW2Nvb3JkMl0uc3RhdGUgPSAnbWlzcyc7XG4gICAgICB9XG4gICAgfSxcbiAgICBnYW1lT3ZlcjogKCkgPT4ge1xuICAgICAgaWYgKHN1bmtlbi5sZW5ndGggPj0gc2hpcHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgc3Vua2VkU2hpcHM6ICgpID0+IHN1bmtlbi5sZW5ndGgsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHYW1lQm9hcmQ7XG4iLCJjb25zdCBTaGlwID0gKGxlbmd0aCkgPT4gKHtcbiAgbGVuZ3RoLFxuICB0eXBlOiAoKSA9PiB7XG4gICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuICdTdWJtYXJpbmUnO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gJ0Rlc3Ryb3llcic7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAnQ3J1aXNlcic7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAnQmF0dGVsc2hpcCc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBwb3NpdGlvbjogW10sXG4gIGhlYWx0aFBvaW50czogbGVuZ3RoLFxuICBoaXQoY29vcmQpIHtcbiAgICBpZiAodGhpcy5wb3NpdGlvbi5pbmNsdWRlcyhjb29yZCkpIHtcbiAgICAgIHRoaXMuaGVhbHRoUG9pbnRzIC09IHRoaXMuaXNTdW5rKCkgPyAwIDogMTtcbiAgICB9XG4gIH0sXG4gIGlzU3VuaygpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFsdGhQb2ludHMgPT09IDA7XG4gIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IFNoaXA7XG4iLCJjb25zdCBQbGF5ZXIgPSAobmFtLCB0eXApID0+IHtcbiAgY29uc3QgdHlwZSA9IHR5cDtcbiAgY29uc3QgbmFtZSA9IG5hbTtcbiAgY29uc3QgbW92ZXMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXROYW1lOiAoKSA9PiBuYW1lLFxuICAgIGdldFR5cGU6ICgpID0+IHR5cGUsXG4gICAgZ2V0TW92ZXM6ICgpID0+IG1vdmVzLFxuICAgIHBsYXk6IChjZWxsKSA9PiB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2JvdCcpIHtcbiAgICAgICAgbGV0IHJhbmRvbUg7XG4gICAgICAgIGxldCByYW5kb21WO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcmFuZG9tSCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDkpO1xuICAgICAgICAgIHJhbmRvbVYgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA5KTtcbiAgICAgICAgfSB3aGlsZSAobW92ZXMuaW5jbHVkZXMoW3JhbmRvbVYsIHJhbmRvbUhdLmpvaW4oJycpKSk7XG4gICAgICAgIG1vdmVzLnB1c2goW3JhbmRvbVYsIHJhbmRvbUhdLmpvaW4oJycpKTtcbiAgICAgICAgcmV0dXJuIFtyYW5kb21WLCByYW5kb21IXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtjb3JkMSwgY29yZDJdID0gY2VsbC5wb3Muc3BsaXQoJycpLm1hcCgoZSkgPT4gcGFyc2VJbnQoZSkpO1xuICAgICAgaWYgKCFtb3Zlcy5pbmNsdWRlcyhbY29yZDEsIGNvcmQyXS5qb2luKCcnKSkpIHtcbiAgICAgICAgbW92ZXMucHVzaChbY29yZDEsIGNvcmQyXS5qb2luKCcnKSk7XG4gICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHJldHVybiBbY29yZDEsIGNvcmQyXTtcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0ICcuL2Fzc2V0cy9jc3MvbWFpbi5zY3NzJztcbmltcG9ydCBjb21wdXRlckJvYXJkIGZyb20gJy4vRE9NY29udGVudCc7XG5pbXBvcnQgR2FtZUJvYXJkIGZyb20gJy4vZ2FtZUJvYXJkJztcbmltcG9ydCBTaGlwIGZyb20gJy4vc2hpcHMnO1xuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5cbmxldCBjb21wR2FtZSA9IG51bGw7XG5sZXQgcGxheWVyR2FtZSA9IG51bGw7XG5jb25zdCBjb21wUGxheWVyID0gUGxheWVyKCdDb21wdXRlcicsICdib3QnKTtcbmNvbnN0IHBsYXllciA9IFBsYXllcignQ2xhcmVuY2UnLCAnSHVtYW4nKTtcbmNvbnN0IHNoaXBQbGF5ZXIgPSBbU2hpcCg1KSwgU2hpcCg0KSwgU2hpcCgzKSwgU2hpcCgyKSwgU2hpcCgxKV07XG5jb25zdCBzaGlwQ29tcCA9IFtTaGlwKDUpLCBTaGlwKDQpLCBTaGlwKDMpLCBTaGlwKDIpLCBTaGlwKDEpXTtcbmxldCB0dXJuO1xubGV0IHBsSGl0cztcbmxldCBjcEhpdHM7XG5jb25zdCByZWZyZXNoID0gKCkgPT4ge1xuICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKGZhbHNlKTtcbn07XG5cbmNvbnN0IGdhbWVTdGFydCA9ICgpID0+IHtcbiAgY29tcEdhbWUgPSBHYW1lQm9hcmQoc2hpcENvbXApO1xuICBjb21wR2FtZS5wbGFjZVNoaXAoKTtcbiAgY29tcHV0ZXJCb2FyZC5idWlsZENvbXBCb2FyZChjb21wR2FtZSk7XG5cbiAgcGxheWVyR2FtZSA9IEdhbWVCb2FyZChzaGlwUGxheWVyKTtcbiAgcGxheWVyR2FtZS5wbGFjZVNoaXAoKTtcbiAgY29tcHV0ZXJCb2FyZC5idWlsZFBsYXllckJvYXJkKHBsYXllckdhbWUpO1xuICB0dXJuID0gdHJ1ZTtcbiAgcGxIaXRzID0gMDtcbiAgY3BIaXRzID0gMDtcbiAgY29tcHV0ZXJCb2FyZC51cGRhdGVCYW5uZXIodHJ1ZSwgMCk7XG4gIGNvbXB1dGVyQm9hcmQudXBkYXRlQmFubmVyKGZhbHNlLCAwKTtcbn07XG5cbmdhbWVTdGFydCgpO1xuXG4vLyBDb21wdXRlciBtb3ZlXG5jb25zdCBjb21wTW92ZSA9ICgpID0+IHtcbiAgaWYgKCF0dXJuKSB7XG4gICAgY29uc3QgYXJyID0gY29tcFBsYXllci5wbGF5KCk7XG4gICAgY29uc3QgW2NyZDEsIGNyZDJdID0gYXJyO1xuICAgIGFyci51bnNoaWZ0KCdQJyk7XG5cbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhcnIuam9pbignJykpO1xuICAgIHBsYXllckdhbWUucmVjaWV2ZUF0dGFjayhjcmQxLCBjcmQyKTtcbiAgICBjcEhpdHMgPSBwbGF5ZXJHYW1lLnN1bmtlZFNoaXBzKCk7XG4gICAgY29tcHV0ZXJCb2FyZC51cGRhdGVCYW5uZXIodHVybiwgY3BIaXRzKTtcblxuICAgIGNvbXB1dGVyQm9hcmQuY2hhbmdlQ2VsbChkaXYsIHBsYXllckdhbWUuYm9hcmRbY3JkMV1bY3JkMl0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdHVybiA9ICF0dXJuO1xuICAgIH0sIDEwMDApO1xuICAgIGlmIChwbGF5ZXJHYW1lLmdhbWVPdmVyKCkpIHtcbiAgICAgIGNvbXB1dGVyQm9hcmQud3JhcHBlci5pbm5lckhUTUwgPSBjb21wdXRlckJvYXJkLmNvbXB1dGVyV2luO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWVTdGFydCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVmcmVzaCk7XG4gICAgfVxuICB9XG59O1xuXG53aW5kb3cub25jbGljayA9IChlKSA9PiB7XG4gIGxldCBjb3JkMSA9IDA7XG4gIGxldCBjb3JkMiA9IDE7XG4gIGlmICh0dXJuKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC52YWx1ZS5pbmNsdWRlcygnYm90JykpIHtcbiAgICAgIGNvcmQxID0gcGFyc2VJbnQoZS50YXJnZXQuaWQuc3BsaXQoJycpWzBdKTtcbiAgICAgIGNvcmQyID0gcGFyc2VJbnQoZS50YXJnZXQuaWQuc3BsaXQoJycpWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGxheWVyLnBsYXkoY29tcEdhbWUuYm9hcmRbY29yZDFdW2NvcmQyXSkpIHtcbiAgICAgIGNvbXBHYW1lLnJlY2lldmVBdHRhY2soY29yZDEsIGNvcmQyKTtcbiAgICAgIGNvbXB1dGVyQm9hcmQuY2hhbmdlQ2VsbChlLnRhcmdldCwgY29tcEdhbWUuYm9hcmRbY29yZDFdW2NvcmQyXSk7XG4gICAgICBwbEhpdHMgPSBjb21wR2FtZS5zdW5rZWRTaGlwcygpO1xuICAgICAgY29tcHV0ZXJCb2FyZC51cGRhdGVCYW5uZXIodHVybiwgcGxIaXRzKTtcbiAgICAgIGNvbXB1dGVyQm9hcmQud29ybmdNb3ZlSW5kLmNsYXNzTGlzdC52YWx1ZSA9ICdpbnZhbGlkIGhpZGUnO1xuICAgICAgdHVybiA9ICF0dXJuO1xuICAgICAgaWYgKGNvbXBHYW1lLmdhbWVPdmVyKCkpIHtcbiAgICAgICAgY29tcHV0ZXJCb2FyZC53cmFwcGVyLmlubmVySFRNTCA9IGNvbXB1dGVyQm9hcmQucGxheWVyV2luO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZVN0YXJ0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZWZyZXNoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0VGltZW91dChjb21wTW92ZSwgMTUwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXB1dGVyQm9hcmQud29ybmdNb3ZlSW5kLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICB9XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9